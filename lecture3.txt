lapply: loop over a list and evaluate a function on each element of the list
sapply: same as lapply but try to simplity the result
apply: apply a function over the margins of an array
tapply: apply a function over subsets of a vector (table apply) base on value of some variable

table(datafram1$column2)

vapply(flags, unique, numeric(1)), which says that you expect each element of the result
| to be a numeric vector of length 1. vapply is safer than sapply
mapply: multivariate version of lapply

An auxiliary function: split is also useful, particularly in conjunction with lapply//sapply

lapply( x, FUN, ...)

is.vector
is.null
is.integer
...

x is a list,
FUN is a function,
... is ... parameters


# lapply always return a list

x<-list(a=1:5, b=rnorm(10))
lapply(x,mean)

x<-1:4
lapply(x, runif)
lapply(x, runif, min=0, max =10)

x<- list(a = matrix(1:4, 2,2), b=matrix(1:6, 3,2))
lapply(x, function(elt) elt[,1])
lapply(x, function(elt) {elt[,1]} )

# sapply: simplify lapply's result.  
#if result is a list where every element is a vector of length 1, return a vector
#if result is a list which every element is a vector of same length>1, return a matrix
#otherwise, return a list

x<- list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,50))
sapply(x, mean)


#apply: apply to margins of array
# used to apply a function to the rows or columns of a matrix, same speed as loop but in one line
str(apply)
# x is array, Margin is in integer vector indicating which margin should be retained; fun is the funtion

x<- matrix(rnorm(200), 20,10)
x
apply(x,2,mean) # keep the 2nd dimension, callapse the 1st diemnsion
apply(x,1,mean)

rowSums = apply(x, 1, sum)
rowMeanss = apply(x, 1, mean)


x<-matrix(rnorm(200), 20,10, )
apply(x,1,quantile, probs = c(0.25,0.75)) # rpobs is the ... parameters for quantile


a<-array(rnorm(2*2*10), c(2,2,10))
apply(a,c(1,2),mean) # keep the 1st, 2nd dimension, collapse the 3rd

#mapply
str(mapply)
# FUN is a function to apply
... containts arguments to apply over
mapply can take multiple list arguments and then apply a function to the elements of those, of the multiple lists, in parallel. 

list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)

#vectorizing a function
noise<-function(n, mean, sd){
    rnorm(n, mean, sd)
}

mapply(noise, 1:5, 1:5, 2)
}
list(noise(1,1,2), noise(2,2,2),noise(3,3,2),noise(4,4,2),noise(5,5,2))

#tapply  is used to apply a function over subsets of a vector.
str(tapply)
# x is a vector, index is a factor or a list of factors

x<-c(rnorm(10), runif(10), rnorm(10,1))
f<-gl(3,10)
# Generate factors by specifying the pattern of their levels
tapply(x,f,mean)
tapply(x,f,mean, simplify=FALSE)
tapply(x,f,range)


#split, like tapply, but only split to groups, not apply functions
split(x,f)

lapply(split(s,f), mean)

library(datasets)
head(airquality)
s<-split(airquality, airquality$Month)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm=TRUE))

#split on more than one variable
x<-norm(10)
f1<- gl(2,5)
f2<-gl(5,2)
interaction(f1,f2)
split(x,list(f1,f2))
split(x,list(f1,f2), drop=TRUE) # usefull here two levels, but useless for multiple level factors, it will drop empty levels
str(split(x,list(f1,f2), drop=TRUE))

flags <- data.frame().....
cls_list <- lapply(flags, class)

unique(c(3,4,5,5,5,6,6))

vapply(flags, unique, numeric(1))
vapply(flags, function(x) length(unique(x)), numeric(1))

vapply(flags, class, character(1))
asXDV7PK9aTCd2C1